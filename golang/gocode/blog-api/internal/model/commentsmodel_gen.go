// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.5

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	commentsFieldNames          = builder.RawFieldNames(&Comments{})
	commentsRows                = strings.Join(commentsFieldNames, ",")
	commentsRowsExpectAutoSet   = strings.Join(stringx.Remove(commentsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	commentsRowsWithPlaceHolder = strings.Join(stringx.Remove(commentsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	commentsModel interface {
		Insert(ctx context.Context, data *Comments) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Comments, error)
		Update(ctx context.Context, data *Comments) error
		Delete(ctx context.Context, id int64) error
	}

	defaultCommentsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Comments struct {
		Id        int64     `db:"id"`
		Content   string    `db:"content"`
		UserId    int64     `db:"user_id"`
		PostId    int64     `db:"post_id"`
		CreatedAt time.Time `db:"created_at"`
	}
)

func newCommentsModel(conn sqlx.SqlConn) *defaultCommentsModel {
	return &defaultCommentsModel{
		conn:  conn,
		table: "`comments`",
	}
}

func (m *defaultCommentsModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultCommentsModel) FindOne(ctx context.Context, id int64) (*Comments, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", commentsRows, m.table)
	var resp Comments
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCommentsModel) Insert(ctx context.Context, data *Comments) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, commentsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Content, data.UserId, data.PostId)
	return ret, err
}

func (m *defaultCommentsModel) Update(ctx context.Context, data *Comments) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, commentsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Content, data.UserId, data.PostId, data.Id)
	return err
}

func (m *defaultCommentsModel) tableName() string {
	return m.table
}
