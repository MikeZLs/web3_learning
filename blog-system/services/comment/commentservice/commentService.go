// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.5
// Source: comment.proto

package commentservice

import (
	"context"

	"comment/types/comment"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CommentInfo           = comment.CommentInfo
	CreateCommentRequest  = comment.CreateCommentRequest
	CreateCommentResponse = comment.CreateCommentResponse
	ListCommentsRequest   = comment.ListCommentsRequest
	ListCommentsResponse  = comment.ListCommentsResponse

	CommentService interface {
		CreateComment(ctx context.Context, in *CreateCommentRequest, opts ...grpc.CallOption) (*CreateCommentResponse, error)
		ListComments(ctx context.Context, in *ListCommentsRequest, opts ...grpc.CallOption) (*ListCommentsResponse, error)
	}

	defaultCommentService struct {
		cli zrpc.Client
	}
)

func NewCommentService(cli zrpc.Client) CommentService {
	return &defaultCommentService{
		cli: cli,
	}
}

func (m *defaultCommentService) CreateComment(ctx context.Context, in *CreateCommentRequest, opts ...grpc.CallOption) (*CreateCommentResponse, error) {
	client := comment.NewCommentServiceClient(m.cli.Conn())
	return client.CreateComment(ctx, in, opts...)
}

func (m *defaultCommentService) ListComments(ctx context.Context, in *ListCommentsRequest, opts ...grpc.CallOption) (*ListCommentsResponse, error) {
	client := comment.NewCommentServiceClient(m.cli.Conn())
	return client.ListComments(ctx, in, opts...)
}
